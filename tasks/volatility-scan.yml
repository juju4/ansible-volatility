---

## https://digital-forensics.sans.org/media/Poster-2015-Memory-Forensics.pdf
## https://volatility-labs.blogspot.ca/2016/08/automating-detection-of-known-malware.html

- name: ensure clamav is installed
  package: name=clamav state=present
  register: pkg_result
  until: pkg_result is success

- name: ensure target directories exist
  file: dest={{ item }} state=directory mode=0755
  with_items:
    - "{{ volatility_scan_remote_path | dirname }}"
    - "{{ volatility_scan_outdir }}"
    - "{{ volatility_scan_outdir }}/dlldump"
    - "{{ volatility_scan_outdir }}/malfind"
    - "{{ volatility_scan_outdir }}/moddump"

- name: push file to analyze from orchestrator
  copy:
    src: "{{ volatility_scan_orchestrator_src }}"
    dest: "{{ volatility_scan_remote_path }}"
    mode: '0600'
    remote_src: "{{ volatility_scan_remote }}"
  when: volatility_remote_src is defined and volatility_remote_src

- name: uncompress file to analyze
  unarchive:
    src: "{{ volatility_scan_remote_path }}"
    dest: "{{ volatility_scan_remote_path | dirname }}"
    mode: '0600'
  when: volatility_scan_unarchive

- name: execute volatility psxview
  shell: |
    set -o pipefail
    vol.py -f {{ volatility_scan_remote_path | dirname }}/{{ volatility_scan_file }}
        --profile={{ volatility_scan_profile }} psxview |
        tee {{ volatility_scan_outdir }}/psxview.txt
  args:
    creates: "{{ volatility_scan_outdir }}/psxview.txt"
    executable: /bin/bash

- name: execute volatility dlllist
  shell: |
    set -o pipefail
    vol.py -f {{ volatility_scan_remote_path | dirname }}/{{ volatility_scan_file }}
        --profile={{ volatility_scan_profile }} dlllist |
        tee {{ volatility_scan_outdir }}/dlllist.txt
  args:
    creates: "{{ volatility_scan_outdir }}/dlllist.txt"
    executable: /bin/bash

- name: execute volatility dlldump
  shell: |
    set -o pipefail
    vol.py -f {{ volatility_scan_remote_path | dirname }}/{{ volatility_scan_file }}
        --profile={{ volatility_scan_profile }} dlldump —memory -D {{ volatility_scan_outdir }}/dlldump |
        tee {{ volatility_scan_outdir }}/dlldump.txt
  args:
    creates: "{{ volatility_scan_outdir }}/dlldump.txt"
    executable: /bin/bash

- name: execute volatility malfind
  shell: |
    set -o pipefail
    vol.py -f {{ volatility_scan_remote_path | dirname }}/{{ volatility_scan_file }}
        --profile={{ volatility_scan_profile }} malfind -D {{ volatility_scan_outdir }}/malfind |
        tee {{ volatility_scan_outdir }}/malfind.txt
  args:
    creates: "{{ volatility_scan_outdir }}/malfind.txt"
    executable: /bin/bash

- name: execute volatility moddump
  shell: |
    set -o pipefail
    vol.py -f {{ volatility_scan_remote_path | dirname }}/{{ volatility_scan_file }}
        --profile={{ volatility_scan_profile }} moddump —memory -D {{ volatility_scan_outdir }}/moddump |
        tee {{ volatility_scan_outdir }}/moddump.txt
  args:
    creates: "{{ volatility_scan_outdir }}/moddump.txt"
    executable: /bin/bash

- name: check file types of volatility output
  shell: |
    set -o pipefail
    file {{ volatility_scan_outdir }}/* | egrep -i '(PE32 executable|UPX compressed|data)' |
        tee {{ volatility_scan_outdir }}/file.txt
  args:
    creates: "{{ volatility_scan_outdir }}/file.txt"
    executable: /bin/bash

- name: execute clamscan on extracted file
  command: >
    clamscan -ir -l {{ volatility_scan_outdir }}/clamscan.txt {{ volatility_scan_outdir }}/
  args:
    creates: "{{ volatility_scan_outdir }}/clamscan.txt"
  ignore_errors: true

- name: execute volatility netscan
  shell: |
    set -o pipefail
    vol.py -f {{ volatility_scan_remote_path | dirname }}/{{ volatility_scan_file }}
        --profile={{ volatility_scan_profile }} netscan |
        tee {{ volatility_scan_outdir }}/netscan.txt
  args:
    creates: "{{ volatility_scan_outdir }}/netscan.txt"
    executable: /bin/bash

- name: execute volatility ssdt
  shell: |
    set -o pipefail
    vol.py -f {{ volatility_scan_remote_path | dirname }}/{{ volatility_scan_file }}
        --profile={{ volatility_scan_profile }} ssdt |
        tee {{ volatility_scan_outdir }}/ssdt.txt
  args:
    creates: "{{ volatility_scan_outdir }}/ssdt.txt"
    executable: /bin/bash
- name: match ntosk|win32k
  command: "egrep -v '(ntosk|win32k)' {{ volatility_scan_outdir }}/ssdt.txt"
  changed_when: false
  ignore_errors: true

- name: execute volatility usnparser
  shell: |
    set -o pipefail
    vol.py -f {{ volatility_scan_remote_path | dirname }}/{{ volatility_scan_file }}
        --profile={{ volatility_scan_profile }} usnparser --output=csv
        --output-file={{ volatility_scan_outdir }}/usn.csv -CS |
        tee {{ volatility_scan_outdir }}/usnparser.txt
  args:
    creates: "{{ volatility_scan_outdir }}/usnparser.txt"
    executable: /bin/bash

- name: execute volatility autoruns
  shell: |
    set -o pipefail
    vol.py -f {{ volatility_scan_remote_path | dirname }}/{{ volatility_scan_file }}
        --profile={{ volatility_scan_profile }} autoruns -t autoruns |
        tee {{ volatility_scan_outdir }}/autoruns.txt
  args:
    creates: "{{ volatility_scan_outdir }}/autoruns.txt"
    executable: /bin/bash

- name: execute volatility ethscan (pcap recovery)
  shell: |
    set -o pipefail
    vol.py -f {{ volatility_scan_remote_path | dirname }}/{{ volatility_scan_file }}
        --profile={{ volatility_scan_profile }} ethscan --save-pcap={{ volatility_scan_outdir }}/out.pcap |
        tee {{ volatility_scan_outdir }}/ethscan.txt
  args:
    creates: "{{ volatility_scan_outdir }}/ethscan.txt"
    executable: /bin/bash

- name: execute volatility netscan (vista+)
  shell: |
    set -o pipefail
    vol.py -f {{ volatility_scan_remote_path | dirname }}/{{ volatility_scan_file }}
        --profile={{ volatility_scan_profile }} netscan |
        tee {{ volatility_scan_outdir }}/netscan.txt
  args:
    creates: "{{ volatility_scan_outdir }}/netscan.txt"
    executable: /bin/bash

- name: execute volatility mimikatz
  shell: |
    set -o pipefail
    vol.py -f {{ volatility_scan_remote_path | dirname }}/{{ volatility_scan_file }}
        --profile={{ volatility_scan_profile }} mimikatz |
        tee {{ volatility_scan_outdir }}/mimikatz.txt
  args:
    creates: "{{ volatility_scan_outdir }}/mimikatz.txt"
    executable: /bin/bash

- name: execute volatility firefoxhistory
  shell: |
    set -o pipefail
    vol.py -f {{ volatility_scan_remote_path | dirname }}/{{ volatility_scan_file }}
        --profile={{ volatility_scan_profile }} firefoxhistory --output=csv
        --output-file={{ volatility_scan_outdir }}/firefox.csv |
        tee {{ volatility_scan_outdir }}/firefoxhistory.txt
  args:
    creates: "{{ volatility_scan_outdir }}/firefoxhistory.txt"
    executable: /bin/bash

- name: execute volatility consoles
  shell: |
    set -o pipefail
    vol.py -f {{ volatility_scan_remote_path | dirname }}/{{ volatility_scan_file }}
        --profile={{ volatility_scan_profile }} consoles |
        tee {{ volatility_scan_outdir }}/consoles.txt
  args:
    creates: "{{ volatility_scan_outdir }}/consoles.txt"
    executable: /bin/bash

- name: execute volatility cmdscan
  shell: |
    set -o pipefail
    vol.py -f {{ volatility_scan_remote_path | dirname }}/{{ volatility_scan_file }}
        --profile={{ volatility_scan_profile }} cmdscan |
        tee {{ volatility_scan_outdir }}/cmdscan.txt
  args:
    creates: "{{ volatility_scan_outdir }}/cmdscan.txt"
    executable: /bin/bash

- name: check results
  command: "{{ item }}"
  with_items:
    - "ls -lh {{ volatility_scan_outdir }}"
    - "cat {{ volatility_scan_outdir }}/psxview.txt"
    - "cat {{ volatility_scan_outdir }}/clamscan.txt"
  changed_when: false
  register: out
- name: Debug | results output
  debug: var=out

## wipe ? encrypt/sign archive? do on trusted computer anyway.

- block:
    - name: archive output content
      archive:
        src: "{{ volatility_scan_outdir }}"
        dest: "/tmp/volatility-scan-{{ volatility_scan_file | basename }}.tar.gz"
        mode: '0600'
    - name: retrieve output dir to orchestrator
      fetch: "src={{ item }} dest={{ volatility_scan_pulldir }}/"
      with_items:
        - "/tmp/volatility-scan-{{ volatility_scan_file | basename }}.tar.gz"
  when: volatility_scan_pull is defined and volatility_scan_pull
